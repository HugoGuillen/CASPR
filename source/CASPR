#!/bin/bash

###################
## Assign inputs ##
###################

# Define usage of the script
function print_usage {
  printf """
Usage: CASPR      [-h or --help]
                  [-f or --fastq-forward]
                  [-r or --fastq-reverse]
                  [-l or --library]
                  [-e or --exper-design]
                  [-c or --controls]
                  [-o or --orientation]
                  [-a or --adapter-f]
                  [-A or --adapter-r]
                  [-m or --mismatches]
                  [-b or --bases-aligned]
                  [-y or --fdr-threshold]
                  [-t or --threads]
                  [-i or --info-alignment]
                  [-k or --keep-tmp]
                  [-q or --output-dir]
                  [-s or --start]
                  [-p or --pause]
"""
}
function print_error {
  printf "Error with the parameters"
  print_usage
  echo "Try -h or --help for more information"
}
function print_help {
  print_usage
  printf """
Optional arguments:
    -h, --help:
                Show this help message and exit.
    -r, --fastq-reverse:
                fastq files with reverse reads (only for pgRNAs).
                Accepted formats: fastq or fastq.gz.
                Use commas to separate files; write them in quotes.
                Example: \"ctrl1_2.fastq, d1_reverse.fq.gz\".
                The order of the samples must be the same as in -f.
                If not provided, only sgRNAs will be considered.
    -c, --controls:
                txt file with 2 columns, without header.
                1st column: name of the control genes.
                2nd column: type of control.
                Use: Positive, Negative or Neutral.
    -o, --orientation:
                Orientation of the paired guides in plasmid vector.
                Use it only for pgRNAs.
                If 5'-gRNAs-3': write 53. If 3'-gRNAs-5': write 35.
                Default: 53.
    -a, --adapter-f:
                Sequence of the adapter in the forward read.
                It must contain a sequence of nucleotides.
                Default: ACCG.
    -A, --adapter-r:
                Sequence of the adapter in the reverse read.
                Use it only for pgRNAs.
                It must contain a sequence of nucleotides.
                Default: AAAC.
    -m, --mismatches:
                Maximum number of mismatches tolerated during mapping.
                It must be an integer.
                Default: 0.
    -b, --bases-aligned:
                Minimum number of bases that must be aligned during mapping.
                It must be an integer.
                Default: 20 for sgRNAs and 30 for pgRNAs.
    -y, --fdr-threshold:
                FDR threshold for the identification of hits.
                Must be a number between 0 and 1 (limits not included).
                Default: 0.1.
    -t, --threads:
                Number of threads that will be used.
                It must be an integer.
                Default: 8.
    -i, --info-alignment:
                If used, perform several alignments to see additional
                information of mapped and unmapped reads.
                Valid only for pgRNAs.
                Default: not used.
    -k, --keep-tmp:
                If used, keep the intermediate files.
                Default: remove them.
    -q, --output-dir:
                Path and name of the directory to save outputs.
                The directory must exist. It will not be created.
                Default: current directory.
    -s, --start:
                Step from which to start the analysis.
                Options: qc, trim, map, test.
                Default: start indexing the genome (1st step).
    -p, --pause:
                Step at which to stop the analysis.
                This step will be included in the execution.
                Options: indexing, qc, trim, map.
                Default: stop when the test is finished (last step).

Required arguments:
    -f, --fastq-forward:
                fastq files with forward reads.
                Accepted formats: fastq or fastq.gz.
                Use commas to separate files; write them in quotes.
                Example: \"ctrl1_1.fastq, d1_forward.fq.gz\".
    -l, --library:
                txt file with 3 or 4 columns, without header.
                1st column: IDs of the guide RNAs.
                2nd column: Gene names.
                3rd column: Sequence of the 1st guide RNA.
                4th column: Sequence of the 2nd guide RNA, if pgRNAs.
    -e, --exper-design:
                txt file with 3 columns, without header.
                1st column: Eeach row contains a sample.
                Samples must correspond to the forward fastq files names.
                2nd column: Index (integer) showing which samples
                are the same in different periods of time (same index)
                and which samples are replicates (different index).
                3rd column: Condition of each sample. Required:
                \"control\" or \"treated\" followed by a number.
                Example:    ctr1  1  control1
                            ctr2  2  control1
                            d1    1  treated1
                            d2    2  treated1
                            ctr1  1  control2
                            ctr3  3  control2
                            d1    1  treated2
                            d3    3  treated2
                --> Analysis 1: ctr1 & ctr2 vs d1 & d2
                --> Analysis 2: ctr1 & ctr3 vs d1 & d3

Important:
    The number of input files in -f and -r must be the same (for pgRNAs).
    Forward and reverse fastq files must be provided in the same order.

    If --start test, only --exper-design is mandatory, with --output-dir,
    --fdr-threshold and --controls --output-dir being optional.
    In this case, a file named output-dir/outputs/table.counts.txt MUST exist.
    The names of its columns must correspond to names used in --exper-design.
"""
}

# Define inputs
for ARGS in "$@"; do
  shift
        case "$ARGS" in
                "--fastq-reverse") set -- "$@" "-r" ;;
                "--fastq-forward") set -- "$@" "-f" ;;
                "--library") set -- "$@" "-l" ;;
                "--exper-design") set -- "$@" "-e" ;;
                "--controls") set -- "$@" "-c" ;;
                "--orientation") set -- "$@" "-o" ;;
                "--adapter-f") set -- "$@" "-a" ;;
                "--adapter-r") set -- "$@" "-A" ;;
                "--mismatches") set -- "$@" "-m" ;;
                "--bases-aligned") set -- "$@" "-b" ;;
                "--fdr-threshold") set -- "$@" "-y" ;;
                "--threads") set -- "$@" "-t" ;;
                "--info-alignment") set -- "$@" "-i" ;;
                "--keep-tmp") set -- "$@" "-k" ;;
                "--output-dir") set -- "$@" "-q" ;;
                "--start") set -- "$@" "-s" ;;
                "--pause") set -- "$@" "-p" ;;
                "--help") set -- "$@" "-h" ;;
                *) set - "$@" "$ARGS"
        esac
done

# Define defaults
o=53; a="ACCG"; A="AAAC"; m=0; b=0; t=1; i=0; k=0; y=0.1; q="./"

# Define all parameters
while getopts 'r:f:l:e:c:o::a::A::m::b::y::t::q::s:p:ikh' flag; do
        case "${flag}" in
                r) r=${OPTARG} ;;
                f) f=${OPTARG} ;;
                l) l=${OPTARG} ;;
                e) e=${OPTARG} ;;
                c) c=${OPTARG} ;;
                o) o=${OPTARG} ;;
                a) a=${OPTARG} ;;
                A) A=${OPTARG} ;;
                m) m=${OPTARG} ;;
                b) b=${OPTARG} ;;
                y) y=${OPTARG} ;;
                t) t=${OPTARG} ;;
                q) q=${OPTARG} ;;
                s) start=${OPTARG} ;;
                p) pause=${OPTARG} ;;
                i) i=1 ;;
                k) k=1 ;;
                h) print_help
                   exit 1;;
                *) print_error
                    exit 1;;
        esac
done

# Modify inputs to work with them in an easier way
r=$(echo $r | tr "," " ")
f=$(echo $f | tr "," " ")

# If single guides are used, set --orientation always to 53
# Set also --info-alignment to 0, and set --bases-aligned to 20
if [[ $r == "" ]]; then
  o=53
  i=0
  if [[ $b == 0 ]]; then b=20; fi
else # If pgRNAs are used, set --bases-aligned to 30
  if [[ $b == 0 ]]; then b=30; fi
fi

########################################
# Execute the needed scripts in order ##
########################################

# Get the directory of this file to be able to call the others
currentdir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

# Display any error that is initially detected
if [[ $start != "test" ]]; then
  bash $currentdir/basic_errors.sh \
    "$f" "$r" $l $e $o $a $A $m $b $y $t $q "$c" "$start" "$pause" # Inputs
  if [[ $(echo $?) != 0 ]]; then exit 1; fi # Exit if there has been an error.
else
  bash $currentdir/basic_errors_test.sh \
    $e $y $q "$c" "$pause" # Inputs
  if [[ $(echo $?) != 0 ]]; then exit 1; fi # Exit if there has been an error.
fi

# Create a fake genome with the guide RNAs
if [[ $start == "" ]]; then
  bash $currentdir/fake_genome.sh $l $t $q 2> "${q}/intermediate/err.txt"
  if [[ $(cat "${q}/intermediate/err.txt") != "" ]]; then # Exit if error
    echo "Error: problems with the library file. Check it again."
    echo "See ${q}/intermediate/err.txt for more information"
    exit 1
  fi
fi
if [[ $pause == "indexing" ]]; then
  exit 1
fi

# Perform QC of the fastq files. No new errors are expected in this step
if [[ $start == "" || $start == "qc" ]]; then
  bash $currentdir/quality_control.sh \
        "$f" "$r" $t $q 2> "${q}/intermediate/err.txt"
fi
if [[ $pause == "qc" ]]; then
  exit 1
fi

# Trimming and arrangement of the reads
if [[ $start == "" || $start == "qc" || $start == "trim" ]]; then
  bash $currentdir/trimming_reads.sh \
            "$f" "$r" $l $o $a $A $q $t 2> "${q}/intermediate/err.txt"
  if [[ $(cat "${q}/intermediate/err.txt") != "" ]]; then # Exit if error
    echo "Error: problems with the input parameters. Check them again."
    echo "See ${q}/intermediate/err.txt for more information"
    exit 1
  fi

  # Create plots with the trimming statistics
  printf "\nGenerating plots to see trimming statistics\n"
  # Collect needed information previously created
  triminf=$(cat "${q}/intermediate/useful_information.txt" | \
            awk 'NR>1' | sort -k1 | awk '{print $2}')
  # Run R script
  Rscript --vanilla $currentdir/trimming_statistics.R \
            "$triminf" "$q" ${q}/intermediate/trim_stat* \
  || (echo "Problem with R. Check if the R version is correct." && exit 1)
  if [[ $(echo $?) != 0 ]]; then exit 1; fi # Exit if there has been an error.
  echo "Plots were created successfully"
fi
if [[ $pause == "trim" ]]; then
  exit 1
fi

# Align the reads to the fake genome and count the number of reads per guide
if [[ $start != "test" ]]; then
  bash $currentdir/alignment_counts.sh \
        $m $b $t $q "$r" $l $i 2> "${q}/intermediate/err.txt"
  if [[ $(cat "${q}/intermediate/err.txt") != "" ]]; then # Exit if error
    echo "Error: problems with the input parameters. Check them again."
    echo "See ${q}/intermediate/err.txt for more information."
    exit 1
  fi

  # Create plots with the alignment statistics
  printf "\nGenerating plots to see alignment statistics\n"
  Rscript --vanilla $currentdir/alignment_statistics.R \
          $q ${q}/intermediate/Statistics_alignment* \
  || (echo "Problem with R. Check if the R version is correct." && exit 1)
  if [[ $(echo $?) != 0 ]]; then exit 1; fi # Exit if there has been an error.

  # Create plots to see what happens with unmapped reads (only if requested)
  if [[ $i == 1 ]]; then
    bash $currentdir/alignment_info.sh \
              $q "$f" $b $l $currentdir 2> "${q}/intermediate/err.txt"
  else
    mv ${q}/intermediate/Alignment_statistics.pdf ${q}/outputs
  fi
  printf "Plots were created successfully\n"
fi
if [[ $pause == "map" ]]; then
  exit 1
fi

# Compute the test to see the significant genes.
bash \
  $currentdir/test.sh $e $y $q $currentdir "$c" 2> "${q}/intermediate/err.txt"
if [[ $(echo $?) == 2 ]]; then exit 1; fi # Exit if there has been an error.
if [[ $(cat ${q}/intermediate/err.txt | grep -oEi "^ERROR") != "" ]]; then
  echo "Error: problems with MAGeCK."
  echo "See ${q}/intermediate/err.txt for more information"
  exit 1
fi

printf "\nGenerating plots to visualize general results\n"
# Combine results of MAGeCK and PBNPA
Rscript --vanilla $currentdir/combine_res.R \
        $y $q ${q}/outputs/results*summary.txt \
|| (echo "Problem with R. Check if the R version is correct." && exit 1)
if [[ $(echo $?) != 0 ]]; then exit 1; fi # Exit if there has been an error.
echo "Results of MAGeCK and PBNPA were combined successfully"

# Visualize some of the results at the guides level
Rscript --vanilla $currentdir/create_graphs.R \
        $q $y ${q}/intermediate/*sgrna_summary.txt \
|| (echo "Problem with R. Check if the R version is correct." && exit 1)
if [[ $(echo $?) != 0 ]]; then exit 1; fi # Exit if there has been an error.
echo "Plots were created successfully"

# Create files for the visualization with VISPR
bash $currentdir/visualization.sh ${q} $currentdir

###############################
## Remove intermediate files ##
###############################

if [[ $k == 0 ]]; then rm -r ${q}/intermediate; fi # Remove intermediate files

##########
## DONE ##
##########
