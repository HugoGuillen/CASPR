{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CASPR Welcome to CASPR. Available resources: Installation Guide Tutorial Usage Thanks for using CASPR!","title":"Home"},{"location":"#caspr","text":"Welcome to CASPR. Available resources: Installation Guide Tutorial Usage Thanks for using CASPR!","title":"CASPR"},{"location":"installation/","text":"Installation Guide Get started: Download CASPR Code and Data CASPR is being developed and tested under Linux and macOS. In order to use it, first you need to clone the repository: git clone https://github.com/judithbergada/CASPR.git $HOME /CASPR For a proper installation, it is also recommended to run: # Add CASPR to your PATH echo \"export PATH= $HOME /CASPR/source: $PATH \" >> $HOME /.bashrc source $HOME /.bashrc # Please, note that the previous commands do not work if you use Zsh At this point, the tool should be available in your computer. You can check it: CASPR --help Conda Environment Installation CASPR employs several software packages to carry out its different functions: fastqc cutadapt fastx-toolkit STAR samtools mageck vispr R The easiest way to download them is to use Miniconda , which allows to create an isolated environment. To install miniconda, please follow the instuctions . Once Miniconda is installed, you can obtain the required packages by executing the following commands on your terminal: # Create environment conda create -n caspr --yes python = 3 .5 # Install required software conda install -n caspr --yes r = 3 .5.0 conda install -n caspr -c bioconda --yes cutadapt conda install -n caspr -c bioconda --yes star conda install -n caspr -c bioconda --yes samtools conda install -n caspr -c biobuilds --yes fastx-toolkit conda install -n caspr -c bioconda --yes mageck conda install -n caspr -c bioconda --yes vispr conda install -n caspr -c bioconda --yes fastqc Installation on macOS Since macOS uses custom versions of sed and grep , it is also necessary to install the latest GNU version to run CASPR. For that, first you need to have HomeBrew . Once HomeBrew works at your device, you only need to copy the following commands on your terminal: # Install sed and grep brew install gnu-sed grep # Make sure the installed versions are the first ones available in your PATH echo \"export PATH=\\\"/usr/local/opt/gnu-sed/libexec/gnubin:\\$PATH\\\"\" >> ~/.bashrc echo \"export PATH=\\\"/usr/local/opt/grep/libexec/gnubin:\\$PATH\\\"\" >> ~/.bashrc source ~/.bashrc Now, you can start using CASPR on Linux or macOS! Important To use the tool, please do not forget to activate the Conda Environment! # Activate for Linux source activate caspr # Activate for macOS conda activate caspr Users of IBU cluster Users of IBU cluster (Interfaculty Bioinformatics Unit, University of Bern) do not need to follow the guide to install a Conda Environment. Instead, you can load the required software packages, which are all installed in the cluster. This can be done as follows: # Import software: only for users of IBY cluster module add UHTS/Analysis/fastx_toolkit/0.0.13.2 module add UHTS/Aligner/STAR/2.6.0c module add UHTS/Analysis/samtools/1.4 module add R/3.5.1 module add UHTS/Quality_control/mageck-vispr/0.5.4 Neverthless, installing the Conda Environment would have an advantage: VISPR would display the results without the need of additional commands (see the user cases in the tutorial for more information).","title":"Installation"},{"location":"installation/#installation-guide","text":"","title":"Installation Guide"},{"location":"installation/#get-started-download-caspr-code-and-data","text":"CASPR is being developed and tested under Linux and macOS. In order to use it, first you need to clone the repository: git clone https://github.com/judithbergada/CASPR.git $HOME /CASPR For a proper installation, it is also recommended to run: # Add CASPR to your PATH echo \"export PATH= $HOME /CASPR/source: $PATH \" >> $HOME /.bashrc source $HOME /.bashrc # Please, note that the previous commands do not work if you use Zsh At this point, the tool should be available in your computer. You can check it: CASPR --help","title":"Get started: Download CASPR Code and Data"},{"location":"installation/#conda-environment-installation","text":"CASPR employs several software packages to carry out its different functions: fastqc cutadapt fastx-toolkit STAR samtools mageck vispr R The easiest way to download them is to use Miniconda , which allows to create an isolated environment. To install miniconda, please follow the instuctions . Once Miniconda is installed, you can obtain the required packages by executing the following commands on your terminal: # Create environment conda create -n caspr --yes python = 3 .5 # Install required software conda install -n caspr --yes r = 3 .5.0 conda install -n caspr -c bioconda --yes cutadapt conda install -n caspr -c bioconda --yes star conda install -n caspr -c bioconda --yes samtools conda install -n caspr -c biobuilds --yes fastx-toolkit conda install -n caspr -c bioconda --yes mageck conda install -n caspr -c bioconda --yes vispr conda install -n caspr -c bioconda --yes fastqc Installation on macOS Since macOS uses custom versions of sed and grep , it is also necessary to install the latest GNU version to run CASPR. For that, first you need to have HomeBrew . Once HomeBrew works at your device, you only need to copy the following commands on your terminal: # Install sed and grep brew install gnu-sed grep # Make sure the installed versions are the first ones available in your PATH echo \"export PATH=\\\"/usr/local/opt/gnu-sed/libexec/gnubin:\\$PATH\\\"\" >> ~/.bashrc echo \"export PATH=\\\"/usr/local/opt/grep/libexec/gnubin:\\$PATH\\\"\" >> ~/.bashrc source ~/.bashrc Now, you can start using CASPR on Linux or macOS! Important To use the tool, please do not forget to activate the Conda Environment! # Activate for Linux source activate caspr # Activate for macOS conda activate caspr","title":"Conda Environment Installation"},{"location":"installation/#users-of-ibu-cluster","text":"Users of IBU cluster (Interfaculty Bioinformatics Unit, University of Bern) do not need to follow the guide to install a Conda Environment. Instead, you can load the required software packages, which are all installed in the cluster. This can be done as follows: # Import software: only for users of IBY cluster module add UHTS/Analysis/fastx_toolkit/0.0.13.2 module add UHTS/Aligner/STAR/2.6.0c module add UHTS/Analysis/samtools/1.4 module add R/3.5.1 module add UHTS/Quality_control/mageck-vispr/0.5.4 Neverthless, installing the Conda Environment would have an advantage: VISPR would display the results without the need of additional commands (see the user cases in the tutorial for more information).","title":"Users of IBU cluster"},{"location":"tutorial/","text":"Tutorial Running CASPR is extremely easy and convenient to analyze CRIPR-Cas9 screens using pgRNAs. The test data folder contains two brief user cases to go through all steps. Simply copy the scripts provided in each user case to visualize the demos. Get started: Activate Conda Environment If it is your first time with CASPR, please follow the Installation Guide . After finishing with the installation, you should activate the Conda Environment. Please, make sure you do it every time you work with CASPR: # Activate for Linux source activate caspr # Activate for macOS conda activate caspr Users of IBU Cluster Users of IBU cluster (Interfaculty Bioinformatics Unit, University of Bern) will also download CASPR following the Installation Guide . However, you do not need to poceed with the installation of a Conda Environment. Instead, you can load the required software packages, which are all installed in the cluster. Please, make sure you load them every time you work with CASPR: # Import software: only for users of IBY cluster module add UHTS/Analysis/fastx_toolkit/0.0.13.2 module add UHTS/Aligner/STAR/2.6.0c module add UHTS/Analysis/samtools/1.4 module add R/3.5.1 module add UHTS/Quality_control/mageck-vispr/0.5.4 User Case 1: Analysis of a CRISPR Screen Using pgRNAs This user case shows how to analyse a CRISPR screen with the following features: Library of pgRNAs Two time points: week zero and week four Only one replicate per time point Start analysis from the raw sequencing data To compute the analysis, it is essential to have: Paired reads Text file with a library of pgRNAs Text file with the experimental design (control and treated samples) Additionally, you may provide a text file with positive, negative and neutral controls. Let's go to the user case test data folder: cd $HOME /CASPR/testdata/pgrna Let's check that the data is available in the expected formats: # Check that the data has been sucessfully downoaded ls -al . # Display the content of the files to see the format cat expdesign.txt head library.txt head controlfile.txt zcat < week0.1_1.fastq.gz | head Now you are ready to run the example. If you are not sure about the commands, you can copy them immediately from here: # Create output directory mkdir results # Run the tool CASPR \\ -f \"week0.1_1.fastq.gz, week4.1_1.fastq.gz\" \\ -r \"week0.1_2.fastq.gz, week4.1_2.fastq.gz\" \\ --library library.txt \\ -y 0 .25 -k \\ --output-dir ./results \\ --controls controlfile.txt \\ --exper-design expdesign.txt Note that, if you copy the commands from above, you are changing two of the default parameters of CASPR: the FDR threshold -y will be set to 0.25, and the intermediate files will be kept. Please, make sure you keep the intermediate files to follow the second part of the user case. Results After a few minutes, the outputs should appear in your computer. At this point, you can open them and see if they are as expected. The expected outputs are found in: ls results/outputs These are the outpus generated: Alignment Statistics Comparison of MAGeCK and PBNPA Log Counts Selected Genes by MAGeCK Selected Genes by PBNPA Trimming Statistics Moreover, you can benefit from VISPR to get interactive results on you data. Please try the following: # Run VIPR server vispr server ./results/config* --port 5000 # Ctrl-C to exit the server Users of IBU Cluster VISPR installation in the IBU cluster might not be updated. Therefore, users of this cluster will need to run an additional command to see the outputs: # Take VISPR from jpijuan Conda Environment alias vispr = \"/home/jpijuan/miniconda3/envs/vispr/bin/vispr\" # Run VIPR server vispr server ./results/config* --port 5000 # Ctrl-C to exit the server VISPR is a web-based interactive server that creates a webpage with a nice visualization of the results. If you are working from a cluster, you will also need to run this command locally on your computer: ssh -f { user } @binfservms01.unibe.ch -L 5000 :localhost:5000 -N Now, check the webpage on a browser and enjoy visualizing the data. If you are still curious about other options of CASPR, let's try to get more information on the unmapped reads. This can be done esily just by adding the tag -i to the previous command. Furthermore, if you kept the intermediate files with the -k argument, neither the previous nor the next steps will be necessary anymore (only mapping). You can find a solution to quickly finish the user case here: CASPR \\ -f \"week0.1_1.fastq.gz, week4.1_1.fastq.gz\" \\ -r \"week0.1_2.fastq.gz, week4.1_2.fastq.gz\" \\ --library library.txt \\ -i --start map --pause map -y 0 .25 -k \\ --output-dir ./results \\ --controls controlfile.txt \\ --exper-design expdesign.txt Check that everything worked out. Your outputs should look similar to: Alignment Statistics If you arrived here, you finished the first user case successfully! User Case 2: Analysis of a CRISPR Screen Using sgRNAs This user case shows how to analyse a CRISPR screen with the following features: Library of sgRNAs Two time points: week zero and week four Two replicates per time point Start analysis from the raw sequencing data To compute the analysis, it is essential to have: Single-read sequencing Text file with a library of sgRNAs Text file with the experimental design (control and treated samples) Moreover, you may provide a text file with positive, negative and neutral controls, if interested. In this user case, we want to analyse the two replicates separately in two different tests, and we want to perform a third test using the replicates together. Let's go to the user case test data folder: cd $HOME /CASPR/testdata/sgrna Before starting the tests, check that the data is available in the expected formats. Pay special attention on the experimental design file, which allows to obtain the results as required: cat expdesign.txt head library.txt head controlfile.txt zcat < week0.1.fastq.gz | head At this point, you are probably ready to try the analysis yourself. To get nicer visualization of the outputs, it is recommended to use an FDR threshold of 0.25. If you need further help, you can also use these commands: # Create output directory mkdir results # Run the tool CASPR \\ -f \"week0.1.fastq.gz, week0.2.fastq.gz, week4.1.fastq.gz, week4.2.fastq.gz\" \\ --library library.txt \\ -y 0 .25 \\ --output-dir ./results \\ --controls controlfile.txt \\ --exper-design expdesign.txt Results Quickly, the outputs should appear in your computer. You can open them and see if they look as expected. The expected outputs are found in: ls results/outputs These are the outpus generated: Alignment Statistics Comparison of MAGeCK and PBNPA Log Counts Selected Genes by MAGeCK Selected Genes by PBNPA Trimming Statistics Finally, let's perfom the test again using an FDR threshold of 0.1. For that, you do not need to execute all the previous steps, only the assessment of gene significance. It can be done like this: CASPR \\ --start test -y 0 .1 -k \\ --output-dir ./results \\ --controls controlfile.txt \\ --exper-design expdesign.txt The results should be exactly the same as above, but fewer hits are displayed in the plots. This option ensures that you can perform analyses of CRISPR screens not only starting rom the raw sequencing data, but also beginning from a table of read counts. If you kept the intermediate files in this last step, you can visualize again the results with VISPR: # Run VIPR server vispr server ./results/config* --port 6000 # Ctrl-C to exit the server Users of IBU Cluster VISPR installation in the IBU cluster might not be updated. Therefore, users of this cluster will need to run an additional command to see the outputs: # Take VISPR from jpijuan Conda Environment alias vispr = \"/home/jpijuan/miniconda3/envs/vispr/bin/vispr\" # Run VIPR server vispr server ./results/config* --port 6000 # Ctrl-C to exit the server Also keep in mind that, if you work from a cluster, you will need to copy the following line locally on your computer in order to see the results: ssh -f { user } @binfservms01.unibe.ch -L 6000 :localhost:6000 -N The data should be already available at this webpage . Now that you arrived here, you are totally ready to use CASPR with your CRISPR data. Enjoy!","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"Running CASPR is extremely easy and convenient to analyze CRIPR-Cas9 screens using pgRNAs. The test data folder contains two brief user cases to go through all steps. Simply copy the scripts provided in each user case to visualize the demos.","title":"Tutorial"},{"location":"tutorial/#get-started-activate-conda-environment","text":"If it is your first time with CASPR, please follow the Installation Guide . After finishing with the installation, you should activate the Conda Environment. Please, make sure you do it every time you work with CASPR: # Activate for Linux source activate caspr # Activate for macOS conda activate caspr Users of IBU Cluster Users of IBU cluster (Interfaculty Bioinformatics Unit, University of Bern) will also download CASPR following the Installation Guide . However, you do not need to poceed with the installation of a Conda Environment. Instead, you can load the required software packages, which are all installed in the cluster. Please, make sure you load them every time you work with CASPR: # Import software: only for users of IBY cluster module add UHTS/Analysis/fastx_toolkit/0.0.13.2 module add UHTS/Aligner/STAR/2.6.0c module add UHTS/Analysis/samtools/1.4 module add R/3.5.1 module add UHTS/Quality_control/mageck-vispr/0.5.4","title":"Get started: Activate Conda Environment"},{"location":"tutorial/#user-case-1-analysis-of-a-crispr-screen-using-pgrnas","text":"This user case shows how to analyse a CRISPR screen with the following features: Library of pgRNAs Two time points: week zero and week four Only one replicate per time point Start analysis from the raw sequencing data To compute the analysis, it is essential to have: Paired reads Text file with a library of pgRNAs Text file with the experimental design (control and treated samples) Additionally, you may provide a text file with positive, negative and neutral controls. Let's go to the user case test data folder: cd $HOME /CASPR/testdata/pgrna Let's check that the data is available in the expected formats: # Check that the data has been sucessfully downoaded ls -al . # Display the content of the files to see the format cat expdesign.txt head library.txt head controlfile.txt zcat < week0.1_1.fastq.gz | head Now you are ready to run the example. If you are not sure about the commands, you can copy them immediately from here: # Create output directory mkdir results # Run the tool CASPR \\ -f \"week0.1_1.fastq.gz, week4.1_1.fastq.gz\" \\ -r \"week0.1_2.fastq.gz, week4.1_2.fastq.gz\" \\ --library library.txt \\ -y 0 .25 -k \\ --output-dir ./results \\ --controls controlfile.txt \\ --exper-design expdesign.txt Note that, if you copy the commands from above, you are changing two of the default parameters of CASPR: the FDR threshold -y will be set to 0.25, and the intermediate files will be kept. Please, make sure you keep the intermediate files to follow the second part of the user case.","title":"User Case 1: Analysis of a CRISPR Screen Using pgRNAs"},{"location":"tutorial/#results","text":"After a few minutes, the outputs should appear in your computer. At this point, you can open them and see if they are as expected. The expected outputs are found in: ls results/outputs These are the outpus generated: Alignment Statistics Comparison of MAGeCK and PBNPA Log Counts Selected Genes by MAGeCK Selected Genes by PBNPA Trimming Statistics Moreover, you can benefit from VISPR to get interactive results on you data. Please try the following: # Run VIPR server vispr server ./results/config* --port 5000 # Ctrl-C to exit the server Users of IBU Cluster VISPR installation in the IBU cluster might not be updated. Therefore, users of this cluster will need to run an additional command to see the outputs: # Take VISPR from jpijuan Conda Environment alias vispr = \"/home/jpijuan/miniconda3/envs/vispr/bin/vispr\" # Run VIPR server vispr server ./results/config* --port 5000 # Ctrl-C to exit the server VISPR is a web-based interactive server that creates a webpage with a nice visualization of the results. If you are working from a cluster, you will also need to run this command locally on your computer: ssh -f { user } @binfservms01.unibe.ch -L 5000 :localhost:5000 -N Now, check the webpage on a browser and enjoy visualizing the data. If you are still curious about other options of CASPR, let's try to get more information on the unmapped reads. This can be done esily just by adding the tag -i to the previous command. Furthermore, if you kept the intermediate files with the -k argument, neither the previous nor the next steps will be necessary anymore (only mapping). You can find a solution to quickly finish the user case here: CASPR \\ -f \"week0.1_1.fastq.gz, week4.1_1.fastq.gz\" \\ -r \"week0.1_2.fastq.gz, week4.1_2.fastq.gz\" \\ --library library.txt \\ -i --start map --pause map -y 0 .25 -k \\ --output-dir ./results \\ --controls controlfile.txt \\ --exper-design expdesign.txt Check that everything worked out. Your outputs should look similar to: Alignment Statistics If you arrived here, you finished the first user case successfully!","title":"Results"},{"location":"tutorial/#user-case-2-analysis-of-a-crispr-screen-using-sgrnas","text":"This user case shows how to analyse a CRISPR screen with the following features: Library of sgRNAs Two time points: week zero and week four Two replicates per time point Start analysis from the raw sequencing data To compute the analysis, it is essential to have: Single-read sequencing Text file with a library of sgRNAs Text file with the experimental design (control and treated samples) Moreover, you may provide a text file with positive, negative and neutral controls, if interested. In this user case, we want to analyse the two replicates separately in two different tests, and we want to perform a third test using the replicates together. Let's go to the user case test data folder: cd $HOME /CASPR/testdata/sgrna Before starting the tests, check that the data is available in the expected formats. Pay special attention on the experimental design file, which allows to obtain the results as required: cat expdesign.txt head library.txt head controlfile.txt zcat < week0.1.fastq.gz | head At this point, you are probably ready to try the analysis yourself. To get nicer visualization of the outputs, it is recommended to use an FDR threshold of 0.25. If you need further help, you can also use these commands: # Create output directory mkdir results # Run the tool CASPR \\ -f \"week0.1.fastq.gz, week0.2.fastq.gz, week4.1.fastq.gz, week4.2.fastq.gz\" \\ --library library.txt \\ -y 0 .25 \\ --output-dir ./results \\ --controls controlfile.txt \\ --exper-design expdesign.txt","title":"User Case 2: Analysis of a CRISPR Screen Using sgRNAs"},{"location":"tutorial/#results_1","text":"Quickly, the outputs should appear in your computer. You can open them and see if they look as expected. The expected outputs are found in: ls results/outputs These are the outpus generated: Alignment Statistics Comparison of MAGeCK and PBNPA Log Counts Selected Genes by MAGeCK Selected Genes by PBNPA Trimming Statistics Finally, let's perfom the test again using an FDR threshold of 0.1. For that, you do not need to execute all the previous steps, only the assessment of gene significance. It can be done like this: CASPR \\ --start test -y 0 .1 -k \\ --output-dir ./results \\ --controls controlfile.txt \\ --exper-design expdesign.txt The results should be exactly the same as above, but fewer hits are displayed in the plots. This option ensures that you can perform analyses of CRISPR screens not only starting rom the raw sequencing data, but also beginning from a table of read counts. If you kept the intermediate files in this last step, you can visualize again the results with VISPR: # Run VIPR server vispr server ./results/config* --port 6000 # Ctrl-C to exit the server Users of IBU Cluster VISPR installation in the IBU cluster might not be updated. Therefore, users of this cluster will need to run an additional command to see the outputs: # Take VISPR from jpijuan Conda Environment alias vispr = \"/home/jpijuan/miniconda3/envs/vispr/bin/vispr\" # Run VIPR server vispr server ./results/config* --port 6000 # Ctrl-C to exit the server Also keep in mind that, if you work from a cluster, you will need to copy the following line locally on your computer in order to see the results: ssh -f { user } @binfservms01.unibe.ch -L 6000 :localhost:6000 -N The data should be already available at this webpage . Now that you arrived here, you are totally ready to use CASPR with your CRISPR data. Enjoy!","title":"Results"},{"location":"usage/","text":"CASPR Usage Input Parameters For a complete analysis of CRISPR screens, CASPR requires at least three or four parameters, depending on whether the library is composed of sgRNAs or pgRNAs. These are as follows: -f or --fastq-forward : sequencing files that contain the forward reads, for which fastq and fastq.gz formats are accepted. Files must be separated by commas and written in quotes. Example: -f \"ctrl1_1.fastq, d1_forward.fq.gz\" -r or --fastq-reverse : sequencing files that contain the reverse reads, only needed to handle pgRNA libraries. If not provided, sgRNAs will be considered. The accepted formats are fastq and fastq.gz. All files must be separated by commas and written in quotes, and the order of the samples must be the same as used in -f . Example: -r \"ctrl1_2.fastq, d1_reverse.fq.gz\" -l or --library \u001d: text file with 3 or 4 columns, without header. Column1 shows the IDs of the guide-RNAs. Column2 shows the targeted genes. Column3 contains the sequence of the 1st sgRNA. Column4 contains the sequence of the 2nd sgRNA, only if pgRNAs are used. Example: -l pgrna_library.txt The file pgrna_library.txt should have this format: E2F2_1 E2F2 GCCGCGGGCCGTGTGAAAGGG ATAAAGACTGACAGTCTGAA E2F2_2 E2F2 GCAGACGGCGCCTCCCGCAGG ATAAAGACTGACAGTCTGAA E2F2_3 E2F2 GTTGTGCGATGCCTGCCGGCG ATAAAGACTGACAGTCTGAA E2F2_4 E2F2 GCCGCGGGCCGTGTGAAAGGG ACGCTTGTAAGGATCTAGCA E2F2_5 E2F2 GCCGCGGGCCGTGTGAAAGGG TTAGATGGTTGAGGCCAAGG ADAM17_1 ADAM17 GCTCCCGCCCCCCCATTCCGG AGAGACTCGGTAAAGACCCA ADAM17_2 ADAM17 GCTCCCGCCCCCCCATTCCGG GCTCGTTTGAGGGAAGAGCA ADAM17_3 ADAM17 GCTCCCGCCCCCCCATTCCGG TATGCAGTAATCTCGTTGGG ADAM17_4 ADAM17 GTTTTCGTGACGACAGACGGA AGAGACTCGGTAAAGACCCA ADAM17_5 ADAM17 GCTCGTTTGAGGGAAGAGCAG TTTTCGTGACGACAGACGGA -e \u001d or --exper-design \u001d: text file showing the experimental design of the CRISPR screen. It has three columns, without header. Column1 contains the different samples in the analysis, named according to their forward fastq files. Column2 shows the replicates, and each replicate is represented as an integer. Column3 contains the condition of each sample, \"control\" or \"treated\", followed by the number of test. Example: -e expdesign.txt The file expdesign.txt should have this format: ctr1.fastq 1 control1 ctr2.fastq 2 control1 day30_1.fastq 1 treated1 day30_2.fastq 2 treated1 ctr3.fastq 3 control2 ctr4.fastq 4 control2 day30_3.fastq 3 treated2 day30_4.fastq 4 treated2 -> Test 1: ctr1 & ctr2 vs day30_1 & day30_2 -> Test 2: ctr3 & ctr4 vs day30_3 & day30_4 Additionally, CASPR offers a versatile control of the analysis through several optional parameters. Some of them are set by default if not modified by the users; others are ignored if they are not provided. The whole set of optional arguments is the following: -c or --controls : text file with 2 columns, without header. Column1 shows the name of the control genes. Column2 shows the type of control, which must be \"Positive\", \"Negative\" or \"Neutral\". Positive and negative controls are only used in the plots in order to show these genes with different colors. Neutral controls are also used during the step of the analysis, and MAGeCK takes them to predict the null distribution. If controls are not specified, they are not used. Example: -c controlfile.txt The file controlfile.txt should have this format: E2F2 Negative ADAM17 Negative BRCA2 Positive FAM188A Positive AAVS1 Neutral NonTarget Neutral -a or --adapter-f : sequence of the adapter that must be considered to trim the forward reads. Characters must be A, T, G or C, as needed to represent nucleotides. Default: ACCG. Example: -a AGCG -A or --adapter-r : sequence of the adapter that must be considered to trim the reverse reads. Characters must be A, T, G or C, as needed to represent nucleotides. Default: AAAC. Example: -A ATAC -m or --mismatches : maximum number of mismatches to tolerate during the mapping process. Default: 0. Example: -m 2 -b or --bases-aligned : minimum number of bases that must be aligned during the mapping process. Default: 20 bp for sgRNA libraries and 30 bp for pgRNA libraries. Example: -b 35 -y or --fdr-threshold : FDR threshold for the identification of hits. It is used to display the hits in the plots, but it doesn't affect the analysis. Default: 0.1. Example: -y 0.25 -o or --orientation : orientation of the paired guides in the plasmid vector, only needed for pgRNA libraries. If guides are provided such that their sequence is found in the plasmid vector as 5\u2019-pgRNA-3\u2019, this argument should be 53. If users have 3\u2019-pgRNA-5\u2019, it should be 35. Other values are not accepted. Default: 53. Example: -o 53 -t or --threads : number of threads that will be used. Default: 1. Example: -t 10 -q or --output-dir : path to the directory where outputs will be saved. It must exist and will not be created by CASPR. Default: current directory. Example: -q ./Analysis/survival_screen -s or --start : step from which to start the analysis. This argument is helpful if users want to modify any of the parameters of CASPR and recompute only part of the analysis, because the previous steps will not be executed again. Available options are: \"qc\", \"trim\", \"map\" or \"test\". Default: start by indexing the genome. Example: -s map -p \u001d or --pause \u001d: step at which to stop the analysis. This step will be included in the execution. The argument is helpful if users are only interested in performing a specific part of the analysis, avoiding CASPR to arrive at the last step. Available options are: \"indexing\", \"qc\", \"trim\", \"map\". Default: stop when test is finished. Example: -p map -k or --keep-tmp : flag that, when used, forces CASPR to keep the intermediate files after completing the analysis. This option is very helpful if users want to repeat any step of the analysis, because all of the intermediate files are saved and can be used again. Without this option, parameter -s doesn't make sense in a posterior analysis, and CASPR needs to compute all the steps from the beginning. Default: remove intermediate files. -i \u001d or --info-alignment \u001d: flag that, when used, forces CASPR to perform multiple alignments. It is only implemented for the analysis of pgRNA libraries, with the aim to provide additional information on the mapping process. It consists on the following steps: first, it maps the reads to the pgRNAs using parameters specified by the user; second, it tries to align the unmapped reads from the previous step to only one sgRNA \u2014usually 20 bp\u2014, without tolerating any mismatches; third, it maps the reads to the pgRNAs considering parameters -m \u001d and -b \u001d to be, respectively, 0 and the length of the pgRNA sequences \u2014usually 40 bp\u2014; fourth, it maps the reads to the pgRNAs using the same conditions as in the third step, but changing -m \u001d to 3. CASPR provides, by default, some basic statistics and graphs about the trimming and mapping processes. Nonetheless, using this specific flag, -i \u001d, CASPR generates new plots in which the users can see whether unmapped reads have more mismatches than expected, whether they are too short, whether pgRNAs are composed of repeated sgRNAs, or whether pgRNAs are composed of sgRNAs targeting different genes. The main drawback of this option, however, is the long computational time required to perform four different alignments. Thus, it is recommended to use -i only in cases where mapping outputs are atypical or unclear. Further information about the usage of CASPR can be obtained using the following flag, or in CASPR Tutorial : -h \u001d or --help \u001d: flag that, when used, shows a help message and exits. Outputs After completing the analysis of a CRISPR screen, CASPR generates a folder named outputs . All the results and final graphs can be found there. They are as follows: Alignment_statistics.pdf : It contains a bar-plot that shows, for each sample, the percentage of uniquely mapped reads, unmapped reads, and reads that were mapped to more than one guide-RNA. If flag -i was used, it also displays some pie charts with additional information. Please, check documentation of input parameter -i for more details. Trimming_statistics.pdf : It contains multiple histograms and a bar-plot. The histograms show, for each of the samples, the positions in which the adapters were found within the reads. The bar-plot indicates the percentage of reads that could be trimmed in each sample, and the total of number of reads per sample. results_MAGeCK_{{idx}}.gene_summary.txt : It is a table with the p-values and FDRs of all genes computed by MAGeCK. There is one file per test that has been carried out. results_PBNPA_{{idx}}_summary.txt : It is a table with the p-values and FDRs of all genes computed by PBNPA. There is one file per test that has been carried out. comb_result_{{idx}}.txt : It is a table with the Fisher combined p-values of MAGeCK and PBNPA, along with the corresponding FDRs. There is one file per test that has been carried out. Selected_genes_MAGeCK.pdf : It contains two quantile-quantile plots per test. QQ-plots are based on the p-values computed by MAGeCK for the positive and negative selection. Selected_genes_PBNPA.pdf : It contains two quantile-quantile plots per test. QQ-plots are based on the p-values computed by PBNPA for the positive and negative selection. Comp_MAGeCK_PBNPA.pdf : It contains one Venn-diagram per test, showing the overlap between hits detected by MAGeCK and PBNPA. Log_counts.pdf : It contains five plots per test: the first one shows the log2-fold-change of all sgRNAs or pgRNAs; the second one compares the number of read counts per guide of untreated versus treated samples; the third one displays the cumulative counts of all samples; the fourth and fifth graphs are volcano plots showing the log2-fold change of all genes versus the Fisher combined p-values of MAGeCK and PBNPA. In the first volcano plot, genes detected as hits either by MAGeCK or PBNPA are colored. In the second volcano plot, all genes classified as hits according to the Fisher combined statistics are colored. table.counts.txt : It is a table with the quantification of the sgRNAs or pgRNAs. First and second columns correspond to the IDs of the guides and the targeted genes, respectively. The rest of the columns show the number of read counts per guide of the different samples -there is one column per sample-. inputs.txt : It is a text file with information of the input parameters that have been used by CASPR to get the outputs provided. In CASPR Tutorial users can find examples of the output figures that should be expected. Furthermore, CASPR generates three additional folders: qualitycontrol : It shows the quality control of the reads. genome : It contains the indexed library of guide-RNAs, which is needed for the mapping process. intermediate : It contains intermediate files such as the trimmed reads, the unmapped reads, the trimming and mapping statistics used to generate output figures, and other files created by MAGeCK and PBNPA during the analysis. By default, when flag k is not used, this folder is removed.","title":"Usage"},{"location":"usage/#caspr-usage","text":"","title":"CASPR Usage"},{"location":"usage/#input-parameters","text":"For a complete analysis of CRISPR screens, CASPR requires at least three or four parameters, depending on whether the library is composed of sgRNAs or pgRNAs. These are as follows: -f or --fastq-forward : sequencing files that contain the forward reads, for which fastq and fastq.gz formats are accepted. Files must be separated by commas and written in quotes. Example: -f \"ctrl1_1.fastq, d1_forward.fq.gz\" -r or --fastq-reverse : sequencing files that contain the reverse reads, only needed to handle pgRNA libraries. If not provided, sgRNAs will be considered. The accepted formats are fastq and fastq.gz. All files must be separated by commas and written in quotes, and the order of the samples must be the same as used in -f . Example: -r \"ctrl1_2.fastq, d1_reverse.fq.gz\" -l or --library \u001d: text file with 3 or 4 columns, without header. Column1 shows the IDs of the guide-RNAs. Column2 shows the targeted genes. Column3 contains the sequence of the 1st sgRNA. Column4 contains the sequence of the 2nd sgRNA, only if pgRNAs are used. Example: -l pgrna_library.txt The file pgrna_library.txt should have this format: E2F2_1 E2F2 GCCGCGGGCCGTGTGAAAGGG ATAAAGACTGACAGTCTGAA E2F2_2 E2F2 GCAGACGGCGCCTCCCGCAGG ATAAAGACTGACAGTCTGAA E2F2_3 E2F2 GTTGTGCGATGCCTGCCGGCG ATAAAGACTGACAGTCTGAA E2F2_4 E2F2 GCCGCGGGCCGTGTGAAAGGG ACGCTTGTAAGGATCTAGCA E2F2_5 E2F2 GCCGCGGGCCGTGTGAAAGGG TTAGATGGTTGAGGCCAAGG ADAM17_1 ADAM17 GCTCCCGCCCCCCCATTCCGG AGAGACTCGGTAAAGACCCA ADAM17_2 ADAM17 GCTCCCGCCCCCCCATTCCGG GCTCGTTTGAGGGAAGAGCA ADAM17_3 ADAM17 GCTCCCGCCCCCCCATTCCGG TATGCAGTAATCTCGTTGGG ADAM17_4 ADAM17 GTTTTCGTGACGACAGACGGA AGAGACTCGGTAAAGACCCA ADAM17_5 ADAM17 GCTCGTTTGAGGGAAGAGCAG TTTTCGTGACGACAGACGGA -e \u001d or --exper-design \u001d: text file showing the experimental design of the CRISPR screen. It has three columns, without header. Column1 contains the different samples in the analysis, named according to their forward fastq files. Column2 shows the replicates, and each replicate is represented as an integer. Column3 contains the condition of each sample, \"control\" or \"treated\", followed by the number of test. Example: -e expdesign.txt The file expdesign.txt should have this format: ctr1.fastq 1 control1 ctr2.fastq 2 control1 day30_1.fastq 1 treated1 day30_2.fastq 2 treated1 ctr3.fastq 3 control2 ctr4.fastq 4 control2 day30_3.fastq 3 treated2 day30_4.fastq 4 treated2 -> Test 1: ctr1 & ctr2 vs day30_1 & day30_2 -> Test 2: ctr3 & ctr4 vs day30_3 & day30_4 Additionally, CASPR offers a versatile control of the analysis through several optional parameters. Some of them are set by default if not modified by the users; others are ignored if they are not provided. The whole set of optional arguments is the following: -c or --controls : text file with 2 columns, without header. Column1 shows the name of the control genes. Column2 shows the type of control, which must be \"Positive\", \"Negative\" or \"Neutral\". Positive and negative controls are only used in the plots in order to show these genes with different colors. Neutral controls are also used during the step of the analysis, and MAGeCK takes them to predict the null distribution. If controls are not specified, they are not used. Example: -c controlfile.txt The file controlfile.txt should have this format: E2F2 Negative ADAM17 Negative BRCA2 Positive FAM188A Positive AAVS1 Neutral NonTarget Neutral -a or --adapter-f : sequence of the adapter that must be considered to trim the forward reads. Characters must be A, T, G or C, as needed to represent nucleotides. Default: ACCG. Example: -a AGCG -A or --adapter-r : sequence of the adapter that must be considered to trim the reverse reads. Characters must be A, T, G or C, as needed to represent nucleotides. Default: AAAC. Example: -A ATAC -m or --mismatches : maximum number of mismatches to tolerate during the mapping process. Default: 0. Example: -m 2 -b or --bases-aligned : minimum number of bases that must be aligned during the mapping process. Default: 20 bp for sgRNA libraries and 30 bp for pgRNA libraries. Example: -b 35 -y or --fdr-threshold : FDR threshold for the identification of hits. It is used to display the hits in the plots, but it doesn't affect the analysis. Default: 0.1. Example: -y 0.25 -o or --orientation : orientation of the paired guides in the plasmid vector, only needed for pgRNA libraries. If guides are provided such that their sequence is found in the plasmid vector as 5\u2019-pgRNA-3\u2019, this argument should be 53. If users have 3\u2019-pgRNA-5\u2019, it should be 35. Other values are not accepted. Default: 53. Example: -o 53 -t or --threads : number of threads that will be used. Default: 1. Example: -t 10 -q or --output-dir : path to the directory where outputs will be saved. It must exist and will not be created by CASPR. Default: current directory. Example: -q ./Analysis/survival_screen -s or --start : step from which to start the analysis. This argument is helpful if users want to modify any of the parameters of CASPR and recompute only part of the analysis, because the previous steps will not be executed again. Available options are: \"qc\", \"trim\", \"map\" or \"test\". Default: start by indexing the genome. Example: -s map -p \u001d or --pause \u001d: step at which to stop the analysis. This step will be included in the execution. The argument is helpful if users are only interested in performing a specific part of the analysis, avoiding CASPR to arrive at the last step. Available options are: \"indexing\", \"qc\", \"trim\", \"map\". Default: stop when test is finished. Example: -p map -k or --keep-tmp : flag that, when used, forces CASPR to keep the intermediate files after completing the analysis. This option is very helpful if users want to repeat any step of the analysis, because all of the intermediate files are saved and can be used again. Without this option, parameter -s doesn't make sense in a posterior analysis, and CASPR needs to compute all the steps from the beginning. Default: remove intermediate files. -i \u001d or --info-alignment \u001d: flag that, when used, forces CASPR to perform multiple alignments. It is only implemented for the analysis of pgRNA libraries, with the aim to provide additional information on the mapping process. It consists on the following steps: first, it maps the reads to the pgRNAs using parameters specified by the user; second, it tries to align the unmapped reads from the previous step to only one sgRNA \u2014usually 20 bp\u2014, without tolerating any mismatches; third, it maps the reads to the pgRNAs considering parameters -m \u001d and -b \u001d to be, respectively, 0 and the length of the pgRNA sequences \u2014usually 40 bp\u2014; fourth, it maps the reads to the pgRNAs using the same conditions as in the third step, but changing -m \u001d to 3. CASPR provides, by default, some basic statistics and graphs about the trimming and mapping processes. Nonetheless, using this specific flag, -i \u001d, CASPR generates new plots in which the users can see whether unmapped reads have more mismatches than expected, whether they are too short, whether pgRNAs are composed of repeated sgRNAs, or whether pgRNAs are composed of sgRNAs targeting different genes. The main drawback of this option, however, is the long computational time required to perform four different alignments. Thus, it is recommended to use -i only in cases where mapping outputs are atypical or unclear. Further information about the usage of CASPR can be obtained using the following flag, or in CASPR Tutorial : -h \u001d or --help \u001d: flag that, when used, shows a help message and exits.","title":"Input Parameters"},{"location":"usage/#outputs","text":"After completing the analysis of a CRISPR screen, CASPR generates a folder named outputs . All the results and final graphs can be found there. They are as follows: Alignment_statistics.pdf : It contains a bar-plot that shows, for each sample, the percentage of uniquely mapped reads, unmapped reads, and reads that were mapped to more than one guide-RNA. If flag -i was used, it also displays some pie charts with additional information. Please, check documentation of input parameter -i for more details. Trimming_statistics.pdf : It contains multiple histograms and a bar-plot. The histograms show, for each of the samples, the positions in which the adapters were found within the reads. The bar-plot indicates the percentage of reads that could be trimmed in each sample, and the total of number of reads per sample. results_MAGeCK_{{idx}}.gene_summary.txt : It is a table with the p-values and FDRs of all genes computed by MAGeCK. There is one file per test that has been carried out. results_PBNPA_{{idx}}_summary.txt : It is a table with the p-values and FDRs of all genes computed by PBNPA. There is one file per test that has been carried out. comb_result_{{idx}}.txt : It is a table with the Fisher combined p-values of MAGeCK and PBNPA, along with the corresponding FDRs. There is one file per test that has been carried out. Selected_genes_MAGeCK.pdf : It contains two quantile-quantile plots per test. QQ-plots are based on the p-values computed by MAGeCK for the positive and negative selection. Selected_genes_PBNPA.pdf : It contains two quantile-quantile plots per test. QQ-plots are based on the p-values computed by PBNPA for the positive and negative selection. Comp_MAGeCK_PBNPA.pdf : It contains one Venn-diagram per test, showing the overlap between hits detected by MAGeCK and PBNPA. Log_counts.pdf : It contains five plots per test: the first one shows the log2-fold-change of all sgRNAs or pgRNAs; the second one compares the number of read counts per guide of untreated versus treated samples; the third one displays the cumulative counts of all samples; the fourth and fifth graphs are volcano plots showing the log2-fold change of all genes versus the Fisher combined p-values of MAGeCK and PBNPA. In the first volcano plot, genes detected as hits either by MAGeCK or PBNPA are colored. In the second volcano plot, all genes classified as hits according to the Fisher combined statistics are colored. table.counts.txt : It is a table with the quantification of the sgRNAs or pgRNAs. First and second columns correspond to the IDs of the guides and the targeted genes, respectively. The rest of the columns show the number of read counts per guide of the different samples -there is one column per sample-. inputs.txt : It is a text file with information of the input parameters that have been used by CASPR to get the outputs provided. In CASPR Tutorial users can find examples of the output figures that should be expected. Furthermore, CASPR generates three additional folders: qualitycontrol : It shows the quality control of the reads. genome : It contains the indexed library of guide-RNAs, which is needed for the mapping process. intermediate : It contains intermediate files such as the trimmed reads, the unmapped reads, the trimming and mapping statistics used to generate output figures, and other files created by MAGeCK and PBNPA during the analysis. By default, when flag k is not used, this folder is removed.","title":"Outputs"}]}